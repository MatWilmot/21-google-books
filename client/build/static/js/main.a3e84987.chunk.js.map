{"version":3,"sources":["utils/API.js","components/SearchBar.js","components/NavBar.js","App.js","registerServiceWorker.js","index.js"],"names":["API","searchTitle","str","axios","get","searchAuthor","concat","process","GOOGLE_API","SearchBar","react_default","a","createElement","className","type","placeholder","NavBar","react_router_dom","to","App","useEffect","then","res","console","log","catch","err","components_NavBar","react_router","exact","path","components_SearchBar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kPAEeA,EAAA,CAEbC,YAAa,SAAUC,GACrB,OAAOC,IAAMC,IAAI,iBAAmBF,IAItCG,aAAc,SAAUH,GACtB,OAAOC,IAAMC,IAAN,0DAAAE,OACqDJ,EADrD,SAAAI,OACgEC,8CAAYC,eCaxEC,EAtBG,WAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gCACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLD,UAAU,eACVE,YAAY,uBAEdL,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,wBAAhC,sBCMGG,EAjBA,WACb,OACEN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,UAAUL,UAAU,mBAA7B,WAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,SAASL,UAAU,YAA5B,mBCiBOM,MAtBf,WAOE,OANAC,oBAAU,WACRpB,EAAIC,YAAY,mBACboB,KAAK,SAACC,GAAD,OAASC,QAAQC,IAAIF,KAC1BG,MAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,MAC7B,IAGDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAChBpB,EAAAC,EAAAC,cAACmB,EAAD,OAEFrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eCZtBE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlB,KAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1B1B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAyB,GACL3B,QAAQ2B,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIjD,GAAwB2B,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAAjC,OAAMC,GAAN,sBAENyB,EAwCX,SAAiCO,GAE/BoB,MAAMpB,GACHlB,KAAK,SAAAuC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ1D,IAAI,gBAAgB2D,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM3C,KAAK,SAAAsB,GACjCA,EAAasB,aAAa5C,KAAK,WAC7Ba,OAAOC,SAAS+B,aAKpB5B,EAAgBC,KAGnBd,MAAM,WACLF,QAAQC,IACN,mEAzDA2C,CAAwB5B,GAHxBD,EAAgBC,MC7BxB6B","file":"static/js/main.a3e84987.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Search by title\n  searchTitle: function (str) {\n    return axios.get(\"/search/title/\" + str);\n  },\n\n  // search by author\n  searchAuthor: function (str) {\n    return axios.get(\n      `https://www.googleapis.com/books/v1/volumes?q=inauthor:${str}&key=${process.env.GOOGLE_API}`\n    );\n  },\n};\n","import React from \"react\";\n\nconst SearchBar = () => {\n  return (\n    <div className=\"container text-center\">\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">What would you like to read?</h1>\n          <form className=\"col-8 offset-2\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter book title..\"\n            />\n            <button type=\"submit\" className=\"btn btn-primary mt-2\">\n              Search\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <ul className=\"nav justify-content-center\">\n      <li className=\"nav-item\">\n        <Link to=\"/search\" className=\"nav-link active\">\n          Search\n        </Link>\n      </li>\n      <li className=\"nav-item\">\n        <Link to=\"/saved\" className=\"nav-link\">\n          Saved\n        </Link>\n      </li>\n    </ul>\n  );\n};\n\nexport default NavBar;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport API from \"./utils/API\";\nimport SearchBar from \"./components/SearchBar\";\nimport NavBar from \"./components/NavBar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  useEffect(() => {\n    API.searchTitle(\"of mice and men\")\n      .then((res) => console.log(res))\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/search\">\n            <SearchBar />\n          </Route>\n          <Route exact path=\"/saved\"></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n{\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}